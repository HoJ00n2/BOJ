# N의 패턴은 공백으로 채워진 가운데의 (N/3)×(N/3) 정사각형을 크기 N/3의 패턴으로 둘러싼 형태입니다.

# 예시
# N = 27일 때 가운데에는 크기 9x9 만큼의 빈칸이 있고, 그 빈칸 주변에 N = 9일 때의 패턴으로 둘러 쌓여있다는 뜻
# N = 9인 경우 가운데는 크기 3x3 만큼의 빈칸이 있고, 그 빈칸 주변에 N = 3일 때의 패턴으로 둘러 쌓여 있음

# 따라서 N의 패턴을 알려면 N//3 의 패턴을 알아야 합니다. 결국 재귀를 돌면서 N은 최소단위인 1이 되고, N=1일때의 패턴을 만들고 리턴

# 내 생각으로 재귀로 풀려면 3x3의 정사각형 문양에서 가운데만 비어있고 나머지 8 부분을 채운다는 생각으로 접근을 했음 (이렇게되면 n//3 return으로 2중 list가 와야 돼서 불편)
# 이중 리스트 반환보단 그냥 스트링으로 처리할 수 있도록 하는게 훨씬 편함

n = int(input())

def star(n):
    # 최소단위인 1이 될 때 >> return
    if n == 1:
        return ['*']
    
    arr = star(n//3) # 처음엔 n=1일때의 패턴 > 3일 때의 패턴 > 9일때의 패턴 ... 으로 점점 확장된 패턴으로 저장됨
    stars = [] # 패턴을 담을 변수 : 재귀할 때 마다 새로 패턴을 담아야 하므로 초기화
    
    # 가운데 공백 기준 위(3개) 패턴 채우기 > 여긴 그냥 n//3의 위 3개 패턴을 그대로 3배하면 됨
    for i in arr:
        stars.append(i*3)
    
    # 가운데 공백 기준 양 옆(2개) 패턴 채우기 > 여기가 핵심 입력 숫자n의 //3 해준 만큼의 공백을 두면 됨
    for i in arr:
        stars.append(i+' '*(n//3)+i)

    # 가운데 공백 기준 아래(3개) 패턴 채우기
    for i in arr:
        stars.append(i*3)
    
    return stars

print('\n'.join(star(n)))